"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4031],{84538:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var a=t(85893),n=t(11151);const o={title:"GBNF Grammar",description:"What Nitro supports",keywords:["Nitro","Jan","fast inference","inference server","local AI","large language model","OpenAI compatible","open source","llama"]},s=void 0,i={id:"features/grammar",title:"GBNF Grammar",description:"What Nitro supports",source:"@site/docs/features/grammar.md",sourceDirName:"features",slug:"/features/grammar",permalink:"/features/grammar",draft:!1,unlisted:!1,editUrl:"https://github.com/janhq/nitro/tree/main/docs/docs/features/grammar.md",tags:[],version:"current",lastUpdatedBy:"hiro",lastUpdatedAt:1706160515,formattedLastUpdatedAt:"Jan 25, 2024",frontMatter:{title:"GBNF Grammar",description:"What Nitro supports",keywords:["Nitro","Jan","fast inference","inference server","local AI","large language model","OpenAI compatible","open source","llama"]},sidebar:"docsSidebar",previous:{title:"Self extend",permalink:"/features/self-extend"},next:{title:"Nitro with Jan",permalink:"/examples/jan"}},l={},c=[{value:"GBNF Grammar",id:"gbnf-grammar",level:2},{value:"Use GBNF Grammar in Nitro",id:"use-gbnf-grammar-in-nitro",level:2}];function m(e){const r={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",...(0,n.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(r.h2,{id:"gbnf-grammar",children:"GBNF Grammar"}),"\n",(0,a.jsx)(r.p,{children:"GBNF (GGML BNF) makes it easy to set rules for how a model talks or writes. Think of it like teaching the model to always speak correctly, whether it's in emoji or proper JSON format."}),"\n",(0,a.jsx)(r.p,{children:"Bakus-Naur Form (BNF) is a way to describe the rules of computer languages, files, and how they talk to each other. GBNF builds on BNF, adding modern features similar to those found in regular expressions."}),"\n",(0,a.jsxs)(r.p,{children:["In GBNF, we create rules (production rules) to guide how a model forms its responses. These rules use a mix of fixed characters (like letters or emojis) and flexible parts that can change. Each rule follows a format: ",(0,a.jsx)(r.code,{children:"nonterminal ::= sequence..."}),"."]}),"\n",(0,a.jsxs)(r.p,{children:["To get a clearer picture, check out ",(0,a.jsx)(r.a,{href:"https://github.com/ggerganov/llama.cpp/blob/master/grammars/README.md",children:"this guide"}),"."]}),"\n",(0,a.jsx)(r.h2,{id:"use-gbnf-grammar-in-nitro",children:"Use GBNF Grammar in Nitro"}),"\n",(0,a.jsx)(r.p,{children:"To make your Nitro model follow specific speaking or writing rules, use this command:"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-bash",metastring:'title="Nitro Inference With Grammar" {10}',children:'curl http://localhost:3928/v1/chat/completions \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "messages": [\n      {\n        "role": "user",\n        "content": "Who won the world series in 2020?"\n      },\n    ],\n    "grammar_file": "/path/to/grammarfile"\n  }\'\n'})})]})}function d(e={}){const{wrapper:r}={...(0,n.a)(),...e.components};return r?(0,a.jsx)(r,{...e,children:(0,a.jsx)(m,{...e})}):m(e)}},11151:(e,r,t)=>{t.d(r,{Z:()=>i,a:()=>s});var a=t(67294);const n={},o=a.createContext(n);function s(e){const r=a.useContext(o);return a.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function i(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:s(e.components),a.createElement(o.Provider,{value:r},e.children)}}}]);